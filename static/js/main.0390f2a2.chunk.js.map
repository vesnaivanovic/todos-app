{"version":3,"sources":["components/UI/input.jsx","components/UI/button.jsx","components/actions.jsx","components/UI/checkbox.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","type","value","placeholder","onKeyPress","onInputChange","Fragment","e","onChange","Button","children","classes","onClick","className","Actions","filter","setFilter","id","checked","App","state","tasks","text","done","task","handleInputChange","event","setState","target","handleEnterPress","key","addTask","handleSetFilter","updateTaskStatus","index","deleteTask","t","this","valid","exists","find","push","filteredTasks","map","htmlFor","title","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0390f2a2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Input = (props) => {\n    const {type, value, placeholder, onKeyPress, onInputChange} = props;\n\n    return (\n        <React.Fragment>\n            <input\n                type={type}\n                value={value}\n                placeholder={placeholder}\n                onKeyPress={(e) => onKeyPress(e)}\n                onChange={(e) => onInputChange(e)}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Input;\n","import React from 'react';\n\nconst Button = (props) => {\n    const {children, type, classes, onClick} = props;\n\n    return (\n        <button\n            type={type}\n            className={classes}\n            onClick={onClick}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from \"./UI/button\";\n\nconst Actions = (props) => {\n    const {filter, setFilter} = props;\n\n    return (\n        <div className=\"actions\">\n            <Button classes={filter === 'all' ? 'active' : ''}\n                    onClick={() => setFilter('all')}\n            >All</Button>\n            <Button classes={filter === 'completed' ? 'active' : ''}\n                    onClick={() => setFilter('completed')}\n            >Completed</Button>\n            <Button classes={filter === 'incompleted' ? 'active' : ''}\n                    onClick={() => setFilter('incompleted')}\n            >Incompleted</Button>\n        </div>\n    );\n};\n\nexport default Actions;\n","import React from 'react';\n\nconst Input = (props) => {\n    const {id, value, placeholder, checked, onChange} = props;\n\n    return (\n        <React.Fragment>\n            <input\n                id={id}\n                type=\"checkbox\"\n                value={value}\n                checked={checked}\n                placeholder={placeholder}\n                onChange={(e) => onChange(e)}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default Input;\n","import React, {Component} from 'react';\nimport Input from './components/UI/input';\nimport Actions from './components/actions';\nimport Checkbox from './components/UI/checkbox';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        tasks: [\n            {text: 'Buy bread', done: false},\n            {text: 'Do Homework', done: true},\n            {text: 'Throw trash', done: false},\n        ],\n        filter: 'all',\n        task: ''\n    };\n\n    handleInputChange = event => {\n        this.setState({task: event.target.value});\n    };\n\n    handleEnterPress = event => {\n        if (event.key === \"Enter\") {\n            this.addTask();\n        }\n    };\n\n    handleSetFilter = filter => {\n        this.setState({filter})\n    };\n\n    updateTaskStatus = index => {\n        const tasks = [...this.state.tasks];\n        tasks[index].done = !tasks[index].done;\n\n        this.setState({tasks});\n    };\n\n    addTask() {\n        const task = this.state.task;\n        const tasks = [...this.state.tasks];\n\n        const valid = task !== '';\n        const exists = tasks.find(t => t.text === task);\n\n        if (!valid || exists) {\n            this.setState({task: ''});\n            return;\n        }\n\n        tasks.push({\n            text: task,\n            done: false\n        });\n\n        this.setState({\n            tasks,\n            task: ''\n        });\n    }\n\n    deleteTask = task => {\n        let tasks = [...this.state.tasks];\n        tasks = tasks.filter(t => t.text !== task.text);\n\n        this.setState({tasks});\n    };\n\n    filteredTasks() {\n        return this.state.tasks.filter(task => {\n            if (this.state.filter === 'completed') {\n                return task.done;\n            }\n\n            if (this.state.filter === 'incompleted') {\n                return !task.done;\n            }\n\n            return task;\n        });\n    }\n\n    render() {\n        const { task, filter } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className=\"todos shadow\">\n                    <div>\n                        <h3>My Todo List</h3>\n\n                        <div className=\"input-group\">\n                            <Input type=\"text\"\n                                   placeholder=\"I need to..\"\n                                   onInputChange={this.handleInputChange}\n                                   onKeyPress={this.handleEnterPress}\n                                   value={task}\n                            />\n                            <button onClick={() => this.addTask()}>Add</button>\n                        </div>\n\n                        <div className=\"divider shadow\"></div>\n\n                        <div className=\"task-group\">\n                            {\n                                this.filteredTasks().map((task, index) =>\n                                    <div key={index} className=\"task\">\n                                        <Checkbox id={index}\n                                               type=\"checkbox\"\n                                               checked={task.done}\n                                               onChange={() => this.updateTaskStatus(index)}\n                                        />\n                                        <label htmlFor={index}>{task.text}</label>\n                                        <span title=\"Delete\"\n                                              onClick={() => this.deleteTask(task)}\n                                        >X</span>\n                                    </div>\n                                )\n                            }\n                        </div>\n                    </div>\n\n                    <Actions filter={filter} setFilter={this.handleSetFilter}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}